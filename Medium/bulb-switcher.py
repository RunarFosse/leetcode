# Author: Runar Fosse
# Time complexity: O(1)
# Space complexity: O(1)

class Solution:
    def bulbSwitch(self, n: int) -> int:
        return isqrt(n)
        
# From the examples below it is obvious that we are counting
# how many numbers k <= n exist such that k^2 = n.
# This can easily be found through integer square root (flooring sqrt).

# Example 5:
# 1 1 1 1 1
# 1 0 1 0 1
# 1 0 0 0 1
# 1 0 0 1 1
# 1 0 0 1 0

# Example 10:
# 1 1 1 1 1 1 1 1 1 1
# 1 0 1 0 1 0 1 0 1 0
# 1 0 0 0 1 1 1 0 0 0
# 1 0 0 1 1 1 1 1 0 0
# 1 0 0 1 0 1 1 1 0 1
# 1 0 0 1 0 0 1 1 0 1
# 1 0 0 1 0 0 0 1 0 1
# 1 0 0 1 0 0 0 0 0 1
# 1 0 0 1 0 0 0 0 1 1
# 1 0 0 1 0 0 0 0 1 0

# Example 20:
# 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
# 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
# 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0
# 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 1
# 1 0 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0
# 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0
# 1 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0
# 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0
# 1 0 0 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0
# 1 0 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1
# 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0